@model Esportify.Models.Game

@{
    ViewData["Title"] = Model.Name;
    bool isLiked = ViewData["IsLiked"] as bool? ?? false;
}

<div class="game-detail-container">
    <div class="game-header">
        <div class="game-cover">
            <img src="@Model.ImageUrl" alt="@Model.Name" class="cover-image">
        </div>
        <div class="game-info">
            <h1>@Model.Name</h1>
            <span class="game-genre">@Model.Genre</span>

            <!-- Like Button -->
            <div class="like-section">
                @if (User.Identity.IsAuthenticated)
                {
                    <button class="like-btn @(isLiked ? "liked" : "")" data-game-id="@Model.Id">
                        <i class="fas fa-heart"></i>
                        <span>@(isLiked ? "Liked" : "Like")</span>
                    </button>
                    @Html.AntiForgeryToken()
                }
                else
                {
                    <a asp-controller="Auth" asp-action="Login" class="like-btn">
                        <i class="fas fa-heart"></i>
                        <span>Like</span>
                    </a>
                }
                <span class="like-count">@Model.LikedByUsers.Count likes</span>
            </div>

            <div class="game-stats">
                <div class="stat">
                    <i class="fas fa-trophy"></i>
                    <span>@Model.Tournaments.Count tournaments</span>
                </div>
                @if (!string.IsNullOrEmpty(Model.OfficialWebsite))
                {
                    <div class="stat">
                        <i class="fas fa-globe"></i>
                        <a href="@Model.OfficialWebsite" target="_blank" class="official-website">Official Website</a>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="game-content">
        <div class="tournaments-section">
            <h2>Upcoming Tournaments</h2>
            @if (Model.Tournaments.Any())
            {
                <div class="tournaments-grid">
                    @foreach (var tournament in Model.Tournaments)
                    {
                        <div class="tournament-card">
                            <div class="tournament-image">
                                <img src="@tournament.ImageUrl" alt="@tournament.Name">
                            </div>
                            <div class="tournament-info">
                                <h3>@tournament.Name</h3>
                                <div class="tournament-meta">
                                    <span><i class="fas fa-calendar-alt"></i> @tournament.StartDate.ToString("MMM dd")</span>
                                    <span><i class="fas fa-trophy"></i> @tournament.PrizePool.ToString("C0")</span>
                                </div>
                                <a asp-controller="Tournaments" asp-action="Details" asp-route-id="@tournament.Id" class="btn btn-green">
                                    View Tournament
                                </a>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-tournaments">
                    <p>No upcoming tournaments for this game yet.</p>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a asp-controller="Tournaments" asp-action="Create" asp-route-gameId="@Model.Id" class="btn btn-green">
                            Create Tournament
                        </a>
                    }
                </div>
            }
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --black: #0a0a0a;
            --dark-grey: #1a1a1a;
            --medium-grey: #2a2a2a;
            --light-grey: #3a3a3a;
            --green: #00ff88;
            --dark-green: #00cc6a;
            --text: #ffffff;
            --error: #ff4655;
        }

        .game-detail-container {
            padding: 2rem 0;
            background-color: var(--black);
        }

        .game-header {
            display: flex;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .game-cover {
            flex: 1;
            max-width: 300px;
        }

        .cover-image {
            width: 100%;
            border-radius: 8px;
            object-fit: cover;
        }

        .game-info {
            flex: 2;
        }

            .game-info h1 {
                font-size: 2.5rem;
                font-weight: 700;
                color: var(--green);
                margin-bottom: 0.5rem;
            }

        .game-genre {
            color: var(--text);
            font-size: 1.1rem;
            text-transform: uppercase;
        }

        .like-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin: 1.5rem 0;
        }

        .like-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: var(--medium-grey);
            border: 1px solid var(--light-grey);
            color: var(--text);
            padding: 0.5rem 1.25rem;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

            .like-btn:hover {
                background: var(--dark-green);
                border-color: var(--green);
                transform: translateY(-2px);
            }

            .like-btn i {
                color: var(--text);
                transition: all 0.3s ease;
            }

            .like-btn.liked i,
            .like-btn:hover i {
                color: var(--green);
            }

            .like-btn.liked {
                background: rgba(0, 255, 136, 0.2);
                border-color: var(--green);
            }

        .like-count {
            color: var(--text);
            font-size: 0.9rem;
        }

        .game-stats {
            display: flex;
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .stat {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text);
        }

        .official-website {
            color: var(--green);
            text-decoration: none;
        }

            .official-website:hover {
                color: var(--dark-green);
                text-decoration: underline;
            }

        .tournaments-section h2 {
            color: var(--green);
            margin-bottom: 1.5rem;
        }

        .tournaments-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .tournament-card {
            background: var(--dark-grey);
            border: 1px solid var(--medium-grey);
            border-radius: 8px;
            overflow: hidden;
        }

        .tournament-image img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }

        .tournament-info {
            padding: 1rem;
        }

            .tournament-info h3 {
                color: var(--text);
                margin-bottom: 0.5rem;
            }

        .tournament-meta {
            display: flex;
            gap: 1rem;
            color: var(--text);
            margin-bottom: 1rem;
        }

        .btn-green {
            background-color: var(--green);
            border-color: var(--green);
            color: var(--black);
            font-weight: 600;
            text-transform: uppercase;
            padding: 0.5rem 1.5rem;
            transition: all 0.3s;
        }

            .btn-green:hover {
                background-color: var(--dark-green);
                border-color: var(--dark-green);
                transform: translateY(-2px);
            }

        .no-tournaments {
            text-align: center;
            color: var(--text);
        }

        .game-cover {
            max-width: 100%;
        }

        .like-section {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const likeButton = document.querySelector('.like-btn[data-game-id]');
            if (likeButton) {
                likeButton.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const gameId = this.getAttribute('data-game-id');
                    const token = document.querySelector('[name="__RequestVerificationToken"]')?.value;

                    if (!token) {
                        alert('Error: CSRF token missing');
                        console.error('CSRF token not found');
                        return;
                    }

                    try {
                        const response = await fetch(`/api/games/${gameId}/toggle-like`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': token
                            },
                            body: JSON.stringify({})
                        });

                        if (!response.ok) {
                            const error = await response.json();
                            alert(error.error || 'Failed to toggle like');
                            return;
                        }

                        const data = await response.json();
                        const isLiked = data.isLiked;
                        const likeCount = data.likeCount;

                        // Update UI
                        this.classList.toggle('liked', isLiked);
                        this.querySelector('span').textContent = isLiked ? 'Liked' : 'Like';
                        const heart = this.querySelector('i');
                        heart.style.transform = 'scale(1.3)';
                        setTimeout(() => {
                            heart.style.transform = 'scale(1)';
                        }, 300);

                        const likeCountElement = document.querySelector('.like-count');
                        likeCountElement.textContent = `${likeCount} likes`;
                    } catch (error) {
                        alert('Error toggling like. Please try again.');
                        console.error('Like toggle error:', error);
                    }
                });
            }
        });
    </script>
}
@{
    ViewData["Title"] = "Games";
}

<div class="container py-5">
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h1 class="display-4">Supported <span class="text-gradient">Games</span></h1>
            <p class="lead">Browse all the games we support for tournaments and competitive play</p>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-6 mb-3 mb-md-0">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="gameSearch" placeholder="Search games...">
            </div>
        </div>
        <div class="col-md-6">
            <select class="form-select" id="gameFilter">
                <option value="all">All Genres</option>
                <option value="fps">FPS</option>
                <option value="moba">MOBA</option>
                <option value="battle-royale">Battle Royale</option>
                <option value="strategy">Strategy</option>
                <option value="sports">Sports</option>
            </select>
        </div>
    </div>

    <!-- Game Cards -->
    <div class="row" id="gameContainer">
        <!-- Game Card Template (this will be populated from database) -->
        @for (int i = 0; i < 6; i++)
        {
            <div class="col-lg-4 col-md-6 mb-4 game-card" data-genre="fps">
                <div class="card h-100 game-card-inner">
                    <div class="game-image-container">
                        <img src="https://via.placeholder.com/400x225?text=Game+Image" class="card-img-top" alt="Game placeholder">
                        <div class="game-badge">FPS</div>
                    </div>
                    <div class="card-body">
                        <h3 class="card-title">Game Title</h3>
                        <p class="card-text">Short description of the game would go here. This will be loaded from the database.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge bg-primary">Active Tournaments: 5</span>
                            <a href="#" class="btn btn-sm btn-outline-primary">View Details</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination (you can implement server-side later) -->
    <nav aria-label="Game pagination" class="mt-5">
        <ul class="pagination justify-content-center">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>
</div>

@section Styles {
    <style>
        .text-gradient {
            background: linear-gradient(to right, var(--bs-primary), var(--highlight));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .game-card-inner {
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(15, 25, 35, 0.9);
            border-radius: 8px;
            overflow: hidden;
        }

            .game-card-inner:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
                border-color: var(--bs-primary);
            }

        .game-image-container {
            position: relative;
            overflow: hidden;
        }

        .game-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--bs-primary);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.8rem;
        }

        .card-title {
            color: var(--bs-primary);
            margin-bottom: 1rem;
        }

        .card-text {
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 1.5rem;
        }

        .page-item.active .page-link {
            background-color: var(--bs-primary);
            border-color: var(--bs-primary);
        }

        .page-link {
            color: var(--bs-primary);
        }

        @@media (max-width: 768px) {
            .game-card {
                margin-bottom: 1.5rem;
            }
        }
    </style>
}

@section Scripts {
    <script>
        // Client-side filtering and searching
        document.addEventListener('DOMContentLoaded', function() {
            const gameSearch = document.getElementById('gameSearch');
            const gameFilter = document.getElementById('gameFilter');
            const gameCards = document.querySelectorAll('.game-card');

            // Search functionality
            gameSearch.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();

                gameCards.forEach(card => {
                    const title = card.querySelector('.card-title').textContent.toLowerCase();
                    const description = card.querySelector('.card-text').textContent.toLowerCase();

                    if (title.includes(searchTerm) || description.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            // Filter functionality
            gameFilter.addEventListener('change', function() {
                const filterValue = this.value;

                gameCards.forEach(card => {
                    const genre = card.getAttribute('data-genre');

                    if (filterValue === 'all' || genre === filterValue) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            // Simple animation when cards come into view
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = 1;
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.game-card-inner').forEach(card => {
                card.style.opacity = 0;
                card.style.transform = 'translateY(20px)';
                card.style.transition = 'opacity 0.5s, transform 0.5s';
                observer.observe(card);
            });
        });
    </script>
}
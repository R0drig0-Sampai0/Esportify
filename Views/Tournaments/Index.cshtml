@model List<Tournament>
@using Esportify.Models

@{
    ViewData["Title"] = "Torneios";
}

<!-- Hero Section -->
<section class="games-hero">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">Torneios <span class="text-gradient">Disponíveis</span></h1>
            <p class="hero-subtitle">Competes contra os melhores e prova as tuas habilidades</p>
            <div class="search-container">
                <div class="search-input">
                    <i class="fas fa-search"></i>
                    <input type="text" id="tournamentSearch" placeholder="Pesquisar torneios...">
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Main Content -->
<div class="games-container">
    <div class="container">
        <!-- Filter Bar -->
        <div class="filter-bar">
            <div class="filter-group">
                <span class="filter-label">Filtrar por:</span>
                <div class="filter-options">
                    <button class="filter-btn active" data-filter="all">Todos</button>
                    <button class="filter-btn" data-filter="fps">FPS</button>
                    <button class="filter-btn" data-filter="moba">MOBA</button>
                    <button class="filter-btn" data-filter="battle-royale">Battle Royale</button>
                    <button class="filter-btn" data-filter="strategy">Estratégia</button>
                    <button class="filter-btn" data-filter="sports">Desporto</button>
                </div>
            </div>
            <div class="sort-group">
                <span class="sort-label">Ordenar por:</span>
                <select class="sort-select">
                    <option value="popular">Mais Populares</option>
                    <option value="prize">Maior Prémio</option>
                    <option value="newest">Mais Recentes</option>
                    <option value="soonest">A Começar Brevemente</option>
                </select>
            </div>
        </div>

        @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
        {
            <div class="admin-actions">
                <a asp-controller="Tournaments" asp-action="Create" class="btn btn-add-game">
                    <i class="fas fa-plus"></i> Criar Torneio
                </a>
            </div>
        }

        <!-- Tournaments Grid -->
        <div class="games-grid" id="tournamentContainer">
            @foreach (var tournament in Model)
            {
                <div class="game-card" data-genre="@tournament.Game.Genre?.ToLower()">
                    <div class="game-card-inner">
                        <div class="game-image">
                            <img src="@tournament.ImageUrl" alt="@tournament.Name"
                                 onerror="this.onerror=null;this.src='/images/default-tournament.jpg';">
                            <div class="game-badge">@tournament.Game.Genre</div>
                            <div class="game-overlay">
                                <span class="tournament-count">Prémio @tournament.PrizePool.ToString("C0")</span>
                            </div>
                        </div>
                        <div class="game-info">
                            <h3 class="game-title">@tournament.Name</h3>
                            <div class="game-stats">
                                <div class="stat">
                                    <i class="fas fa-calendar-alt"></i>
                                    <span>@tournament.StartDate.ToString("MMM dd")</span>
                                </div>
                                <div class="stat">
                                    <i class="fas fa-users"></i>
                                    <span>@tournament.Registrations.Count/@tournament.MaxTeams Equipas</span>
                                </div>
                            </div>
                            @{
                                var status = tournament.StartDate > DateTime.Now
                                ? "Inscrições Abertas"
                                : tournament.EndDate > DateTime.Now
                                ? "A Decorrer"
                                : "Concluído";
                                var statusClass = tournament.StartDate > DateTime.Now
                                ? "status-registering"
                                : tournament.EndDate > DateTime.Now
                                ? "status-ongoing"
                                : "status-completed";
                            }
                            <div class="tournament-status @statusClass">@status</div>
                            <a asp-controller="Tournaments" asp-action="Details" asp-route-id="@tournament.Id" class="view-btn">
                                Ver Detalhes <i class="fas fa-arrow-right"></i>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Empty State -->
        @if (!Model.Any())
        {
            <div class="empty-state">
                <i class="fas fa-trophy"></i>
                <h3>Não há torneios disponíveis</h3>
                <p>Volta mais tarde ou cria o teu próprio torneio</p>
                @if (User.Identity.IsAuthenticated)
                {
                    <a asp-controller="Tournaments" asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Criar Torneio
                    </a>
                }
            </div>
        }

        <!-- Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <div class="pagination-container">
                <nav class="pagination">
                    <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage > 1 ? ViewBag.CurrentPage - 1 : 1)"
                       class="page-nav @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                        <i class="fas fa-chevron-left"></i>
                    </a>

                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        <a asp-action="Index" asp-route-page="@i"
                           class="page-number @(i == ViewBag.CurrentPage ? "active" : "")">
                            @i
                        </a>
                    }

                    <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage < ViewBag.TotalPages ? ViewBag.CurrentPage + 1 : ViewBag.TotalPages)"
                       class="page-nav @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </nav>
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        /* Games Page Styles */
        .games-hero {
            background: linear-gradient(rgba(10, 10, 10, 0.9), rgba(10, 10, 10, 0.9)), url('/images/tournaments-hero-bg.jpg') no-repeat center center;
            background-size: cover;
            padding: 5rem 0 4rem;
            text-align: center;
            border-bottom: 1px solid rgba(0, 255, 136, 0.2);
        }

        .hero-title {
            font-family: 'Oxanium', sans-serif;
            font-weight: 800;
            font-size: 3rem;
            margin-bottom: 1rem;
            color: white;
        }

        .text-gradient {
            background: linear-gradient(to right, var(--green), var(--dark-green));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .hero-subtitle {
            font-size: 1.25rem;
            color: #b3b3b3;
            margin-bottom: 2rem;
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
        }

        .search-container {
            max-width: 600px;
            margin: 0 auto;
        }

        .search-input {
            position: relative;
            display: flex;
            align-items: center;
            background: rgba(26, 26, 26, 0.8);
            border-radius: 50px;
            padding: 0.8rem 1.5rem;
            border: 1px solid rgba(0, 255, 136, 0.3);
        }

            .search-input i {
                color: var(--green);
                margin-right: 1rem;
                font-size: 1.1rem;
            }

            .search-input input {
                background: transparent;
                border: none;
                color: white;
                width: 100%;
                font-size: 1rem;
                outline: none;
            }

                .search-input input::placeholder {
                    color: #666;
                }

        /* Filter Bar */
        .filter-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1.5rem;
            margin: 2rem 0;
            padding: 1rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .filter-group, .sort-group {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .filter-label, .sort-label {
            color: var(--green);
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .filter-options {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .filter-btn {
            background: rgba(26, 26, 26, 0.8);
            color: #b3b3b3;
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.5rem 1.25rem;
            border-radius: 50px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .filter-btn:hover, .filter-btn.active {
                background: var(--green);
                color: var(--black);
                border-color: var(--green);
            }

        .sort-select {
            background: rgba(26, 26, 26, 0.8);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
            cursor: pointer;
        }

        /* Admin Actions */
        .admin-actions {
            margin-bottom: 1.5rem;
        }

        .btn-add-game {
            background: var(--green);
            color: var(--black);
            padding: 0.75rem 1.5rem;
            border-radius: 50px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            border: none;
            text-decoration: none;
        }

            .btn-add-game:hover {
                background: var(--dark-green);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 255, 136, 0.2);
            }

        /* Games Grid */
        .games-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .game-card {
            position: relative;
            transition: transform 0.3s ease;
        }

        .game-card-inner {
            background: rgba(26, 26, 26, 0.8);
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.05);
            transition: all 0.3s ease;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .game-card:hover .game-card-inner {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            border-color: var(--green);
        }

        .game-image {
            position: relative;
            aspect-ratio: 16/9;
            overflow: hidden;
        }

            .game-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                transition: transform 0.5s ease;
            }

        .game-card:hover .game-image img {
            transform: scale(1.05);
        }

        .game-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--green);
            color: var(--black);
            padding: 0.25rem 0.75rem;
            border-radius: 50px;
            font-size: 0.75rem;
            font-weight: 700;
            text-transform: uppercase;
        }

        .game-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            padding: 1rem;
            text-align: center;
        }

        .tournament-count {
            color: white;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .game-info {
            padding: 1.25rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .game-title {
            font-family: 'Oxanium', sans-serif;
            font-weight: 700;
            color: white;
            margin-bottom: 0.5rem;
            font-size: 1.25rem;
        }

        .game-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 1rem 0;
        }

        .stat {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #b3b3b3;
            font-size: 0.8rem;
        }

            .stat i {
                color: var(--green);
                font-size: 0.9rem;
            }

        /* Tournament Status */
        .tournament-status {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 50px;
            font-size: 0.75rem;
            font-weight: 600;
            margin: 0.5rem 0;
        }

        .status-registering {
            background: rgba(40, 167, 69, 0.2);
            color: var(--green);
            border: 1px solid var(--green);
        }

        .status-ongoing {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid #ffc107;
        }

        .status-completed {
            background: rgba(108, 117, 125, 0.2);
            color: #6c757d;
            border: 1px solid #6c757d;
        }

        .view-btn {
            color: var(--green);
            font-size: 0.85rem;
            font-weight: 600;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: color 0.3s ease;
            margin-top: auto;
        }

            .view-btn:hover {
                color: white;
            }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem;
            background: rgba(26, 26, 26, 0.5);
            border-radius: 8px;
            border: 1px dashed rgba(255, 255, 255, 0.1);
            margin: 2rem 0;
        }

            .empty-state i {
                font-size: 3rem;
                color: var(--green);
                margin-bottom: 1rem;
            }

            .empty-state h3 {
                color: white;
                margin-bottom: 0.5rem;
            }

            .empty-state p {
                color: #b3b3b3;
                margin-bottom: 1.5rem;
            }

        /* Pagination */
        .pagination-container {
            margin: 3rem 0;
            display: flex;
            justify-content: center;
        }

        .pagination {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .page-nav, .page-number {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 6px;
            color: #b3b3b3;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .page-nav {
            background: rgba(26, 26, 26, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

            .page-nav:not(.disabled):hover {
                border-color: var(--green);
                color: var(--green);
            }

        .page-number {
            background: transparent;
            border: 1px solid transparent;
        }

            .page-number:hover, .page-number.active {
                background: var(--green);
                color: var(--black);
                border-color: var(--green);
            }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .filter-bar {
                flex-direction: column;
                align-items: flex-start;
            }

            .games-grid {
                grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            }

            .hero-title {
                font-size: 2rem;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Filter functionality
            const filterBtns = document.querySelectorAll('.filter-btn');
            const tournamentCards = document.querySelectorAll('.game-card');

            filterBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Update active state
                    filterBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');

                    const filterValue = this.dataset.filter;

                    // Filter tournaments
                    tournamentCards.forEach(card => {
                        if (filterValue === 'all' || card.dataset.genre === filterValue) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });

            // Search functionality
            const tournamentSearch = document.getElementById('tournamentSearch');
            tournamentSearch.addEventListener('input', function() {
                const searchTerm = this.value.trim().toLowerCase();
                tournamentCards.forEach(card => {
                    const title = card.querySelector('.game-title').textContent.toLowerCase();
                    if (title.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            // Sort functionality
            const sortSelect = document.querySelector('.sort-select');
            sortSelect.addEventListener('change', function() {
                // In a real implementation, this would make an API call
                console.log('Ordenar por:', this.value);
            });

            // Animation for tournament cards
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = 1;
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.game-card').forEach((card, index) => {
                card.style.opacity = 0;
                card.style.transform = 'translateY(20px)';
                card.style.transition = `opacity 0.5s ${index * 0.1}s, transform 0.5s ${index * 0.1}s`;
                observer.observe(card);
            });
        });
    </script>
}